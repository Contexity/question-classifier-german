# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class Body(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, text=None, lang='de', comments=False):  # noqa: E501
        """Body - a model defined in OpenAPI

        :param text: The text of this Body.  # noqa: E501
        :type text: str
        :param lang: The lang of this Body.  # noqa: E501
        :type lang: str
        :param comments: The comments of this Body.  # noqa: E501
        :type comments: bool
        """
        self.openapi_types = {
            'text': str,
            'lang': str,
            'comments': bool
        }

        self.attribute_map = {
            'text': 'text',
            'lang': 'lang',
            'comments': 'comments'
        }

        self._text = text
        self._lang = lang
        self._comments = comments

    @classmethod
    def from_dict(cls, dikt) -> 'Body':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The body of this Body.  # noqa: E501
        :rtype: Body
        """
        return util.deserialize_model(dikt, cls)

    @property
    def text(self):
        """Gets the text of this Body.


        :return: The text of this Body.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this Body.


        :param text: The text of this Body.
        :type text: str
        """
        if text is None:
            raise ValueError("Invalid value for `text`, must not be `None`")  # noqa: E501

        self._text = text

    @property
    def lang(self):
        """Gets the lang of this Body.


        :return: The lang of this Body.
        :rtype: str
        """
        return self._lang

    @lang.setter
    def lang(self, lang):
        """Sets the lang of this Body.


        :param lang: The lang of this Body.
        :type lang: str
        """
        allowed_values = ["en", "de"]  # noqa: E501
        if lang not in allowed_values:
            raise ValueError(
                "Invalid value for `lang` ({0}), must be one of {1}"
                .format(lang, allowed_values)
            )

        self._lang = lang

    @property
    def comments(self):
        """Gets the comments of this Body.


        :return: The comments of this Body.
        :rtype: bool
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """Sets the comments of this Body.


        :param comments: The comments of this Body.
        :type comments: bool
        """

        self._comments = comments
